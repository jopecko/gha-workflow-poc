name: Release new version

permissions:
  id-token: write
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The semver release'
        required: true
        type: string
      staging_data_id:
        description: 'The Data ID for the staging cluster'
        required: false
        default: '1113'
        type: string
      staging_run_id:
        description: 'The unique Run ID for the staging cluster'
        required: true
        type: string
      production_data_id:
        description: 'The Data ID for the production cluster'
        required: false
        default: '14'
        type: string
      production_run_id:
        description: 'The unique Run ID for the production cluster'
        required: true
        type: string

jobs:
  pull_request:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: validate input
        run: |-
          if [ "${{ inputs.version }}" != "X.X.X" ]; then
            VERSION_REGEX="^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"
            if [[ ! "${{ inputs.version }}" =~ $VERSION_REGEX ]]; then
              echo "Invalid version format. Please use a valid semantic version such as 'X.X.X'"
              exit 1
            fi
          fi
      - name: create pull request
        run: |-
          prod_ns=core-loop-$(echo "${{ inputs.production_data_id }}")-$(echo "${{ inputs.production_run_id }}")
          stage_ns=core-loop-$(echo "${{ inputs.production_data_id }}")-$(echo "${{ inputs.production_run_id }}")

          mkdir -p ./platform/production
          cp ./templates/core-loop-app.yaml ./platform/production/"${prod_ns}.yaml"
          awk 'NR==FNR{rep=(NR>1?rep RS:"") $0; next} {gsub(/@HELM_OVERRIDES@/,rep)}1' \
              ./templates/prod-helm-overrides.yaml ./platform/production/"${prod_ns}.yaml" > prod-tmp
          mv prod-tmp ./platform/production/"${prod_ns}.yaml"
          sed -i "s/@ENV@/production/g" ./platform/production/"${prod_ns}.yaml"
          sed -i "s/@NAMESPACE@/${prod_ns}/g" ./platform/production/"${prod_ns}.yaml"
          sed -i "s/@VERSION@/${{ inputs.version }}/g" ./platform/production/"${prod_ns}.yaml"
          sed -i "s/@DATA_ID@/${{ inputs.production_data_id }}/g" ./platform/production/"${prod_ns}.yaml"
          sed -i "s/@RUN_ID@/${{ inputs.production_run_id }}/g" ./platform/production/"${prod_ns}.yaml"


          mkdir -p ./platform/staging
          cp ./templates/core-loop-app.yaml ./platform/staging/"${stage_ns}.yaml"
          awk 'NR==FNR{rep=(NR>1?rep RS:"") $0; next} {gsub(/@HELM_OVERRIDES@/,rep)}1' \
              ./templates/stage-helm-overrides.yaml ./platform/staging/"${stage_ns}.yaml" > stage-tmp
          mv stage-tmp ./platform/staging/"${stage_ns}.yaml"
          sed -i "s/@ENV@/staging/g" ./platform/staging/"${stage_ns}.yaml"
          sed -i "s/@NAMESPACE@/${stage_ns}/g" ./platform/staging/"${stage_ns}.yaml"
          sed -i "s/@VERSION@/${{ inputs.version }}/g" ./platform/staging/"${stage_ns}.yaml"
          sed -i "s/@DATA_ID@/${{ inputs.staging_data_id }}/g" ./platform/staging/"${stage_ns}.yaml"
          sed -i "s/@RUN_ID@/${{ inputs.staging_run_id }}/g" ./platform/staging/"${stage_ns}.yaml"

      - name: create PR
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: Release v${{ inputs.version }}
          title: "CB-00000: Release v${{ inputs.version }}"
          body: |
            Creates new production and staging namespaces for core-loop release v${{ inputs.version }}

            Auto-generated by[create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          branch: release-${{ inputs.version }}
          labels: automated pr
